version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - event-platform
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    mem_limit: 1g

  payment_service:
    build:
      context: ../payments/ #https://github.com/event-ticketing-system/payments.git#master  # Replace with your repo
      dockerfile: ./backend/Dockerfile
    container_name: payment_service
    ports:
      - "8001:8000"
    networks:
      - event-platform
    environment:
      DATABASE_URL: "postgresql://postgres:password@db:5432/payments"  #  DB service
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq/"
    depends_on:
      - rabbitmq
      - db

  notification_service:
    build:
      context: ../notifications/ #https://github.com/event-ticketing-system/notifications.git#master  # Replace with your repo
      dockerfile: ./backend/Dockerfile
    container_name: notification_service
    ports:
      - "8003:8000"
    networks:
      - event-platform
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq/"
    depends_on:
      - rabbitmq
    mem_limit: 512m

  order_service:
    build:
      context: ../orders/ #https://github.com/event-ticketing-system/orders.git#master  # Replace with your repo
      dockerfile: ./backend/Dockerfile  #  Dockerfile in the order_service repo
    container_name: order_service
    ports:
      - "8002:8000"  # Expose the order service on port 8002
    networks:
      - event-platform
    environment:
      DATABASE_URL: "postgresql://user:password@order_db:5432/order_db"  # DB
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq/"
    depends_on:
      - rabbitmq
      - order_db

  db: #  PostgreSQL service for payments
    image: postgres:13
    container_name: db
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - event-platform
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payments

  order_db: # PostgreSQL service for orders
    image: postgres:13
    container_name: order_db
    volumes:
      - order_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - event-platform
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order_db

  catalog_backend:
    build:
      context: ../catalog/
      dockerfile: Dockerfile.backend 
    container_name: catalog_backend_srv
    env_file:
      - ../catalog/backend/.env
    ports:
      - "8004:8000"
    depends_on:
      - cat_mongo_db
    volumes:
      - .:/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  catalog_frontend:
    build:
      context: ../catalog/ #https://github.com/event-ticketing-system/orders.git#master  # Replace with your repo
      dockerfile: Dockerfile.frontend 
    container_name: catalog_frontend
    ports:
      - "3001:3000"
    working_dir: /app # Set the working directory to /app
    command: ["npm", "start"]
    depends_on:
      - catalog_backend

  cat_mongo_db:
    image: mongo:latest
    container_name: cat_mongo_db
    env_file:
      - ../catalog/.env
    volumes:
      - mongo_cat:/data/db
    ports:
      - '6001:27017'

  auth_backend:
    build:
      context: ../jwt-auth/ #https://github.com/event-ticketing-system/orders.git#master  # Replace with your repo
      dockerfile: ./dockerfile
    container_name: auth_backend
    env_file:
      - ../jwt-auth/.env
    ports:
      - "8005:8000"
    depends_on:
      - auth_mongo_db
    volumes:
      - ../jwt-auth:/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  auth_mongo_db:
    image: mongo:latest
    container_name: auth_mongo_db
    env_file:
      - ./.env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE_AUTH}
    volumes:
      - mongo_auth:/data/db
    ports:
      - '6000:27017'

networks:
  event-platform:
    driver: bridge

volumes:
  db_data:
  order_db_data:
  mongo_auth:
  mongo_cat:
